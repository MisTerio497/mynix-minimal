#!/usr/bin/env bash

set -euo pipefail

# –¶–≤–µ—Ç–∞
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
RESET="\e[0m"

# –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ä—Ç
TEST_PORT=54321
PROTOCOL="TCP"
TIMEOUT=5

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_deps() {
  local missing=()
  for cmd in curl ip systemctl; do
    if ! command -v "$cmd" &> /dev/null; then
      missing+=("$cmd")
    fi
  done
  
  if [[ ${#missing[@]} -gt 0 ]]; then
    echo -e "${RED}‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã: ${missing[*]}${RESET}"
    exit 1
  fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ miniupnpd
check_upnp_service() {
  echo -e "üß™ ${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ miniupnpd...${RESET}"
  if systemctl is-active --quiet miniupnpd; then
    echo -e "${GREEN}‚úÖ miniupnpd —Ä–∞–±–æ—Ç–∞–µ—Ç${RESET}"
  else
    echo -e "${RED}‚ùå miniupnpd –Ω–µ –∑–∞–ø—É—â–µ–Ω${RESET}"
    echo -e "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: ${YELLOW}sudo systemctl start miniupnpd${RESET}"
    exit 1
  fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ IGD
check_igd() {
  echo -e "\nüåê ${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ IGD (UPnP —Ä–æ—É—Ç–µ—Ä–∞)...${RESET}"
  if ! command -v upnpc &> /dev/null; then
    echo -e "${YELLOW}‚ÑπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ miniupnpc —á–µ—Ä–µ–∑ nix-shell...${RESET}"
    nix-shell -p miniupnpc --run "upnpc -l"
  else
    timeout "$TIMEOUT" upnpc -l || {
      echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ä–æ—É—Ç–µ—Ä–∞${RESET}"
      echo -e "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:"
      echo -e "1. UPnP –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–æ—É—Ç–µ—Ä–∞"
      echo -e "2. –ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –ø–æ—Ä—Ç 1900/UDP"
      exit 1
    }
  fi
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–æ–≤
get_ips() {
  echo -e "\nüì° ${BLUE}–ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–æ–≤...${RESET}"
  LOCAL_IP=$(ip route get 1.1.1.1 | awk '{for(i=1;i<=NF;i++) if($i=="src") print $(i+1)}')
  PUBLIC_IP=$(timeout "$TIMEOUT" curl -s https://api.ipify.org || echo "unknown")
  
  echo -e "üñ•Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π IP: ${GREEN}$LOCAL_IP${RESET}"
  echo -e "üåç –í–Ω–µ—à–Ω–∏–π IP:   ${GREEN}$PUBLIC_IP${RESET}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ NAT
check_nat() {
  echo -e "\nüîç ${BLUE}–ü—Ä–æ–≤–µ—Ä–∫–∞ NAT...${RESET}"
  if [[ "$LOCAL_IP" == "$PUBLIC_IP" ]]; then
    echo -e "${GREEN}üåê –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (NAT: OPEN)${RESET}"
    NAT_STATUS="OPEN"
  else
    echo -e "${YELLOW}üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω NAT, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤...${RESET}"
    
    echo -e "‚è≥ –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Ä—Ç $TEST_PORT ‚Üí $TEST_PORT ($PROTOCOL)"
    if timeout "$TIMEOUT" upnpc -a "$LOCAL_IP" "$TEST_PORT" "$TEST_PORT" "$PROTOCOL" 2>&1 | grep -q "is redirected to"; then
      echo -e "${GREEN}‚úÖ –ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–∞ —É—Å–ø–µ—à–µ–Ω! (NAT: OPEN)${RESET}"
      NAT_STATUS="OPEN"
    else
      echo -e "${YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –ø–æ—Ä—Ç (NAT: MODERATE)${RESET}"
      NAT_STATUS="MODERATE"
    fi
  fi
}

# –û—á–∏—Å—Ç–∫–∞
cleanup() {
  echo -e "\nüßπ ${BLUE}–û—á–∏—Å—Ç–∫–∞...${RESET}"
  if [[ "$NAT_STATUS" == "OPEN" ]]; then
    timeout "$TIMEOUT" upnpc -d "$TEST_PORT" "$PROTOCOL" &> /dev/null && \
    echo -e "${GREEN}‚úÖ –ü–æ—Ä—Ç $TEST_PORT –∑–∞–∫—Ä—ã—Ç${RESET}" || \
    echo -e "${YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç $TEST_PORT${RESET}"
  fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
  check_deps
  check_upnp_service
  check_igd
  get_ips
  check_nat
  cleanup
  
  echo -e "\n${BLUE}=== –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ===${RESET}"
  case "$NAT_STATUS" in
    "OPEN") echo -e "${GREEN}‚úÖ NAT: OPEN ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è${RESET}" ;;
    "MODERATE") echo -e "${YELLOW}‚ö†Ô∏è NAT: MODERATE ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å P2P${RESET}" ;;
    *) echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å NAT-—Å—Ç–∞—Ç—É—Å${RESET}" ;;
  esac
}

main